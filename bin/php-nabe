#!/bin/bash

cd `dirname $0`
cd ..
PHP_NABE_PATH=`pwd`

declare -a tmp_params=(${@})
params=()

with_mysqlnd=true
is_rebuild=false
is_clean_source=false
is_use_git=false

for (( i = 0; i < ${#tmp_params[@]} ; i++ ))
do
    case ${tmp_params[$i]} in

        "--disable-mysqlnd" )

            with_mysqlnd=false
            ;;

        "--rebuild" )

            is_rebuild=true
            ;;

        "--clean-source" )

            is_clean_source=true
            ;;

        "--git" )

            is_use_git=true
            ;;

        *)
            params=("${params[@]}" "${tmp_params[$i]}")
            ;;
    esac
done

function isInstalled() {
    if [ -f $PHP_NABE_PATH/installed ]; then
        pattern=`echo $1 | sed -e 's/\./\\\./g'`
        if grep -e "^$pattern$" $PHP_NABE_PATH/installed > /dev/null ; then
            return 1;
        fi
    fi

    return 0;
}

function getCurrentVersion() {
    if [ ! -f $PHP_NABE_PATH/current ]; then
        return 1;
    fi

    cat $PHP_NABE_PATH/current
}

function downloadSrc() {
    if $is_use_git ; then
        return downloadSrcFromGit $1
    fi


    if [ ! -d $PHP_NABE_PATH/src ]; then
        mkdir $PHP_NABE_PATH/src
    fi

    cd $PHP_NABE_PATH/src

    if $is_clean_source ; then
        rm -fr php-$1
        rm -fr php-$1.tar.gz
    fi

    if [ ! -e php-$1.tar.gz ]; then
        # download 1
        curl -f -L "http://jp1.php.net/get/php-$1.tar.gz/from/this/mirror" > php-$1.tar.gz

        if [ $? -ne 0 ]; then

            mjv=`echo $1 | awk 'match($0, /^[0-9]+\./) { print substr($0,RSTART,RLENGTH-1) }'`

            # download 2
            curl -f -L "http://museum.php.net/php$mjv/php-$1.tar.gz" > php-$1.tar.gz

            if [ $? -ne 0 ]; then

                echo "[ERR] couln't download sourcecode."
                rm php-$1.tar.gz

                return 1;
            fi
        fi
    fi

    if [ ! -d php-$1 ]; then
        tar zxvf php-$1.tar.gz
    fi

    rm php-src
    ln -s php-$1 php-src

    return 0;
}

function buildAutoconf() {
    # install autoconf-2.59d
    if [ ! -d $PHP_NABE_PATH/build/autoconf-2.59d ]; then
        if [ ! -d $PHP_NABE_PATH/src ]; then
            mkdir $PHP_NABE_PATH/src
        fi

        cd $PHP_NABE_PATH/src
        if [ ! -d $PHP_NABE_PATH/src/autoconf ]; then
            git clone https://github.com/kergoth/autoconf
        fi
        cd autoconf

        git clean -df
        git checkout AUTOCONF-2.59d
        if [ $? -ne 0 ]; then
            echo "failed to checkout autoconf-2.59d"
            exit 1;
        fi

        ./configure --prefix=$PHP_NABE_PATH/build/autoconf-2.59d
        if [ $? -ne 0 ]; then
            echo "failed to configure"
            exit 1;
        fi

        make
        if [ $? -ne 0 ]; then
            exit 1;
        fi

        make install
        if [ $? -ne 0 ]; then
            exit 1;
        fi
    fi

    export PHP_AUTOCONF=$PHP_NABE_PATH/build/autoconf-2.59d/bin/autoconf
}


function downloadSrcFromGit() {
    if [ ! -d $PHP_NABE_PATH/src ]; then
        mkdir $PHP_NABE_PATH/src
    fi

    cd $PHP_NABE_PATH/src

    if [ ! -d $PHP_NABE_PATH/src/php-src-git ]; then
        git clone https://github.com/php/php-src.git php-src-git
    fi

    cd $PHP_NABE_PATH/src/php-src-git
    git checkout .
    git clean -fd
    git fetch

    git checkout php-$1

    if [ $? -ne 0 ]; then
        echo "[ERR] could't download sourcecode."

        return 1;
    fi

    cd ..
    rm php-src
    ln -s php-src-git php-src

    return 0;
}

function php-nabe() {
    case $1 in
        
    "h" | "help" )

        echo "help"
        exit 0

        ;;

    "install" )

        if [ "$2" = "" ]; then
            exit 1;
        fi

        if ! $is_rebuild ; then
            isInstalled $2
            if [ $? -eq 1 ]; then
                echo "Installed $2"
                exit 1;
            fi
        fi

        buildAutoconf
        downloadSrc $2
        if [ $? -ne 0 ]; then
            exit 1;
        fi

        cd $PHP_NABE_PATH/src/php-src
        ./buildconf --force
        if [ $? -ne 0 ]; then
            exit 1;
        fi

        rm -fr $PHP_NABE_PATH/src/php-src/include/*
        make clean

        # for extension of mysql, mysqli, pdo_mysql
        if $with_mysqlnd ; then
            export PHP_MYSQLND_ENABLED=yes
            mkdir -p include/php/ext/mysqlnd
            cp ext/mysqlnd/*.h include/php/mysqlnd
        fi

        PREFIX=$PHP_NABE_PATH/build/php-$2
        ./configure --prefix=$PREFIX --with-config-file-path=$PREFIX/etc --with-config-file-scan-dir=$PREFIX/etc/conf.d "${params[@]:2}"

        if [ $? -ne 0 ]; then
            exit 1;
        fi

        make
        if [ $? -ne 0 ]; then
            exit 1;
        fi

        make install
        if [ $? -ne 0 ]; then
            exit 1;
        fi

        cp $PHP_NABE_PATH/src/php-src/php.ini-development $PREFIX/etc/php.ini

        isInstalled $2
        if [ $? -eq 0 ]; then
            echo $2 >> $PHP_NABE_PATH/installed
        fi

        ;;
    "use")

        isInstalled $2
        if [ $? -eq 0 ]; then
            echo "$2 hadn't installed yet."
            exit 1;
        fi

        for bname in pear peardev pecl phar php php-cgi php-config phpize; do
            rm -f $PHP_NABE_PATH/bin/$bname

            binfile=$PHP_NABE_PATH/build/php-$2/bin/$bname
            if [ -e $binfile ] ; then
                ln -s $binfile $PHP_NABE_PATH/bin/$bname
            fi
        done

        echo "change version to $2"
        echo $2 > $PHP_NABE_PATH/current
        ;;

    "disable")

        for bname in pear peardev pecl phar php php-cgi php-config phpize; do
            rm -f $PHP_NABE_PATH/bin/$bname
        done
        rm -f $PHP_NABE_PATH/current

        ;;

    "ls")

        version=`getCurrentVersion`

        for data in `sort $PHP_NABE_PATH/installed`
        do
            if [ "$version" = "$data" ]; then
                echo "=> "$data
            else
                echo "   "$data
            fi
        done
        ;;

    "ext-install")

        if [ "$2" = "" ]; then
            exit 1;
        fi

        version=`getCurrentVersion`
        if [ $? -ne 0 ]; then
            echo "You can not select version."
            exit 1
        fi

        if ! $is_rebuild ; then
            $PHP_NABE_PATH/build/php-$version/bin/php $PHP_NABE_PATH/lib/checkext.php $2
            if [ $? -eq 0 ]; then
                echo "You installed $2 extension already."
                exit 1
            fi
        fi

        downloadSrc $version
        if [ $? -ne 0 ]; then
            exit 1;
        fi

        cd $PHP_NABE_PATH/src/php-src

        if [ -d ext/$2 ]; then
            # ext
            cd ext/$2
            $PHP_NABE_PATH/build/php-$version/bin/phpize
            ./configure --with-php-config=$PHP_NABE_PATH/build/php-$version/bin/php-config "${params[@]:2}"
            if [ $? -ne 0 ]; then
                exit 1;
            fi

            make
            if [ $? -ne 0 ]; then
                exit 1;
            fi

            make install
            if [ $? -ne 0 ]; then
                exit 1;
            fi

        else
            # pecl
            $PHP_NABE_PATH/build/php-$version/bin/pecl install $2
            if [ $? -ne 0 ]; then
                exit 1;
            fi
        fi

        if [ ! -d $PHP_NABE_PATH/build/php-$version/etc/conf.d ]; then
            mkdir $PHP_NABE_PATH/build/php-$version/etc/conf.d
        fi

        echo "extension=$2.so" > $PHP_NABE_PATH/build/php-$version/etc/conf.d/$2.ini

        ;;

    "ext-remove")

        if [ "$2" = "" ]; then
            exit 1;
        fi

        version=`getCurrentVersion`
        if [ $? -ne 0 ]; then
            echo "You can not select version."
            exit 1
        fi

        echo $PHP_NABE_PATH/build/php-$version/etc/conf.d/$2.ini

        ;;

    "ext-ls")
        version=`getCurrentVersion`
        $PHP_NABE_PATH/build/php-$version/bin/php $PHP_NABE_PATH/lib/listext.php

        ;;

    "composer-install")

        cd $PHP_NABE_PATH/bin
        curl -s http://getcomposer.org/installer | $PHP_NABE_PATH/bin/php

        if [ $? -eq 0 ]; then
            mv composer.phar composer
        fi

    esac
}

[ ${#params[@]} -eq 0 ] && php-nabe "help" && exit 1;

php-nabe "${params[@]}"
